name: v2xsim_point_pillar_lidar_deformable_attn
# data_dir: /hd_cache/datasets/V2X-Sim-2.0
# root_dir: '/hd_cache/users/junjie/projects/coperception/v2xsim2_info_generated/v2xsim_infos_train.pkl'
# validate_dir: '/hd_cache/users/junjie/projects/coperception/v2xsim2_info_generated/v2xsim_infos_val.pkl'
# test_dir: '/hd_cache/users/junjie/projects/coperception/v2xsim2_info_generated/v2xsim_infos_test.pkl'
data_dir: /mimer/NOBACKUP/groups/junjie_storage/datasets/v2x-smi
root_dir: '/mimer/NOBACKUP/groups/junjie_storage/datasets/v2x-smi/v2xsim_infos_train.pkl'
validate_dir: '/mimer/NOBACKUP/groups/junjie_storage/datasets/v2x-smi/v2xsim_infos_val.pkl'
test_dir: '/mimer/NOBACKUP/groups/junjie_storage/datasets/v2x-smi/v2xsim_infos_test.pkl'


train_stage: &train_stage "stage1" 
# stage1_model: ./opencood/logs/dairv2x_point_pillar_lidar_deformable_attn_withoutnoise_2024_02_03_17_27_28/net_epoch_bestval_at13.pth
time_delay: 3  # max time delay
load_history: true
bev_h: &bev_h 80
bev_w: &bev_w 80
history_frame: &history_frame 5

noise_setting:
  add_noise: False
  args: 
    pos_std: 0.2
    rot_std: 0.2
    pos_mean: 0
    rot_mean: 0

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 8
  epoches: 20
  eval_freq: 2
  save_freq: 2
  max_cav: &max_cav 5

input_source: ['lidar']
label_type: 'lidar'

comm_range: 500 # 模型中再处理

fusion:
  core_method: 'intermediateLatency'
  dataset: 'v2xsim'
  args: 
    proj_first: false

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 5]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav. Format: xyzxyz minmax
  cav_lidar_range: &cav_lidar [-32, -32, -3, 32, 32, 2]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: point_pillar_deformable
  args:
    calibrate: &calibrate true
    train_stage: *train_stage
    meta_flow:
      embed_dims: 128
      n_frame: *history_frame
      block_cfgs:
        [[128, 8, 8, 8, 8, 0.1, 1, 5, ["cross_attn", "norm", "ffn", "norm", 
                                        "cross_attn", "norm", "ffn", "norm",
                                        "cross_attn", "norm", "ffn", "norm"]],
          [128, 8, 8, 8, 8, 0.1, 1, 5, ["self_attn", "norm", "ffn", "norm", 
                                        "self_attn", "norm", "ffn", "norm"] ]
        ]
      backbone: 
        upsample_strides: [1, 2, 4]
        num_levels: 3
        num_filters: [64, 128, 256]
        num_upsample_filters: [128, 128, 128]
        embed_dims: 128
    supervise_single: true
    use_seperate_head: true

    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *anchor_num

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone: # backbone will downsample 2x
      resnet: true
      voxel_size: *voxel_size
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
      multi_scale: true
      defor_encoder: 
        train_stage: *train_stage
        bev_h: *bev_h
        bev_w: *bev_w
        embed_dims: &embed_dims 128 # 128 for multi-scale; 384 for single scale
        max_num_agent: *max_cav
        feature_level: 3
        calibrate : *calibrate
        # block_cfgs: [[*embed_dims, 8, 4, 8, 4, 0.1, 2, 3, ["cross_attn", "norm", "ffn", "norm"]],
        #             [*embed_dims, 8, 4, 8, 4, 0.1, 2, 3, ["self_attn", "norm", "cross_attn", "norm", "ffn", "norm"]],
        #             [*embed_dims, 8, 4, 8, 4, 0.1, 2, 3, ["self_attn", "norm", "cross_attn", "norm", "ffn", "norm"]]]
        # cross first
        block_cfgs: [[*embed_dims, 8, 8, 8, 8, 0.1, *max_cav, 3, ["cross_attn", "norm", "ffn", "norm"]],
                    [*embed_dims, 8, 8, 8, 8, 0.1, *max_cav, 3, ["cross_attn", "norm", "ffn", "norm"]],
                    [*embed_dims, 8, 8, 8, 8, 0.1, *max_cav, 3, ["cross_attn", "norm", "ffn", "norm"]],
                    [*embed_dims, 8, 8, 8, 8, 0.1, *max_cav, 3, ["cross_attn", "norm", "ffn", "norm"]],
                    [*embed_dims, 8, 8, 8, 8, 0.1, *max_cav, 3, ["self_attn", "norm", "ffn", "norm"]],
                    [*embed_dims, 8, 8, 8, 8, 0.1, *max_cav, 3, ["self_attn", "norm", "ffn", "norm"]]]
      defor_encoder_single:
        bev_h: *bev_h
        bev_w: *bev_w
        embed_dims: *embed_dims
        max_num_agent: 1
        feature_level: 3
        calibrate : *calibrate
        # block_cfgs: [[*embed_dims, 8, 4, 8, 4, 0.1, 1, 3, ["cross_attn", "norm", "ffn", "norm"]],
        #             [*embed_dims, 8, 4, 8, 4, 0.1, 1, 3, ["self_attn", "norm", "cross_attn", "norm", "ffn", "norm"]],
        #             [*embed_dims, 8, 4, 8, 4, 0.1, 1, 3, ["self_attn", "norm", "cross_attn", "norm", "ffn", "norm"]]]
        block_cfgs: [[*embed_dims, 8, 8, 8, 8, 0.1, 1, 3, ["cross_attn", "norm", "ffn", "norm"]],
                  [*embed_dims, 8, 8, 8, 8, 0.1, 1, 3, ["cross_attn", "norm", "ffn", "norm"]],
                  [*embed_dims, 8, 8, 8, 8, 0.1, 1, 3, ["cross_attn", "norm", "ffn", "norm"]],
                  [*embed_dims, 8, 8, 8, 8, 0.1, 1, 3, ["cross_attn", "norm", "ffn", "norm"]],
                  [*embed_dims, 8, 8, 8, 8, 0.1, 1, 3, ["self_attn", "norm", "ffn", "norm"]],
                  [*embed_dims, 8, 8, 8, 8, 0.1, 1, 3, ["self_attn", "norm", "ffn", "norm"]]]
    head_embed_dims: *embed_dims
    dir_args: *dir_args


loss:
  core_method: point_pillar_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    # dir:
    #   type: 'WeightedSoftmaxClassificationLoss'
    #   weight: 0.2
    #   args: *dir_args

# stage 1
optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

# for stage2
# optimizer:
#   core_method: Adam
#   lr: 0.0001 # for stage2; stage1 0.002
#   args:
#     eps: 1e-10
#     # weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15]

