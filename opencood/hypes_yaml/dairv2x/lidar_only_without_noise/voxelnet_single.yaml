name: voxelnet_late_fusion
data_dir: "/data/datasets/DAIR-V2X/cooperative-vehicle-infrastructure"
root_dir: "/data/datasets/DAIR-V2X/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/data/datasets/DAIR-V2X/cooperative-vehicle-infrastructure/val.json"
test_dir: "/data/datasets/DAIR-V2X/cooperative-vehicle-infrastructure/val.json"


yaml_parser: "load_voxel_params"
train_params:
  batch_size: &batch_size 4
  epoches: 60
  eval_freq: 2
  save_freq: 2

input_source: ['lidar']
label_type: 'lidar'

comm_range: 100
only_vis_ego: true

fusion:
  core_method: 'late'
  dataset: 'dairv2x'
  args: []

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 0.4]
    max_points_per_voxel: &T 32  # 32是一个voxel最多多少个点
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-100.8, -40, -3.6, 100.8, 40, 1.6]  # 应该是 504*200*13      0.4*13=5.2

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: &anchor_yaw [0, 90]
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args  # 这个也是coalign这个加的
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: voxel_net # corresponding to VoxelNet
  args:
    N: *batch_size  # 在推理的时候这里会出问题
    T: *T
    lidar_range: *cav_lidar
    voxel_size: *voxel_size
    anchor_number: *anchor_num
    dir_args: *dir_args
    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [ 64 ]
# coalign 这个库loss跟原来opencood来的
loss:
  core_method: point_pillar_loss
  args:
    pos_cls_weight: 1.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    # dir:
    #   type: 'WeightedSoftmaxClassificationLoss'
    #   weight: 0.2
    #   args: *dir_args

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [15, 30]